void catch_exit(int sig);
int execsh(char *cmd);
void exec_cmd(char *cmd);
int oops(Display *d, XErrorEvent *ee);
unsigned int color_name_to_pixel(const char *name);
int window_get_prop(Window w, Atom prop, Atom *type, int *items, void *buffer, int bytes);
int window_get_atom_prop(Window w, Atom atom, Atom *list, int count);
void window_set_atom_prop(Window w, Atom prop, Atom *atoms, int count);
int window_get_cardinal_prop(Window w, Atom atom, unsigned long *list, int count);
void window_set_cardinal_prop(Window w, Atom prop, unsigned long *values, int count);
void window_set_window_prop(Window w, Atom prop, Window *values, int count);
void ewmh_client_list();
client* window_build_client(Window win);
void client_free(client *c);
void stack_free(stack *s);
int client_has_state(client *c, Atom state);
int client_toggle_state(client *c, Atom state);
void query_visible_windows(stack *s);
int window_send_clientmessage(Window target, Window subject, Atom atom, unsigned long protocol, unsigned long mask);
int client_send_wm_protocol(client *c, Atom protocol);
void client_close(client *c);
void client_position_xywh(client *c, int x, int y, int w, int h);
void client_place_spot(client *c, int spot, int force);
void client_spot_cycle(client *c);
Window spot_focus_top_window(int spot, int mon, Window except);
void client_stack_family(client *c, stack *all, stack *raise);
void client_raise_family(client *c);
void client_set_focus(client *c);
void window_listen(Window win);
void client_update_border(client *c);
void client_flush_tags(client *c);
void action_move(void *data, int num, client *cli);
void action_focus(void *data, int num, client *cli);
void action_close(void *data, int num, client *cli);
void action_cycle(void *data, int num, client *cli);
void action_other(void *data, int num, client *cli);
void action_command(void *data, int num, client *cli);
void action_find_or_start(void *data, int num, client *cli);
void action_move_monitor(void *data, int num, client *cli);
void action_focus_monitor(void *data, int num, client *cli);
void action_raise_tag(void *data, int tag, client *cli);
void action_fullscreen(void *data, int num, client *cli);
void action_above(void *data, int num, client *cli);
void action_tag(void *data, int num, client *cli);
void action_untag(void *data, int num, client *cli);
void create_notify(XCreateWindowEvent *e);
void configure_request(XConfigureRequestEvent *e);
void map_request(XMapEvent *e);
void map_notify(XMapEvent *e);
void unmap_notify(XUnmapEvent *e);
void key_press(XKeyEvent *e);
void button_press(XButtonEvent *e);
void client_message(XClientMessageEvent *e);
void any_event(XEvent *e);
int main(int argc, char *argv[]);
